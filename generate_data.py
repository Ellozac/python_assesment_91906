# THIS FILE WAS GENERATED BY CHATGPT
# PLEASE DO NOT MARK
import json
import random
import os
import argparse

# Define menu
menu = [
    {"name": "Cheeseburger", "price": 2.49},
    {"name": "McChicken", "price": 3.99},
    {"name": "Filet-O-Fish", "price": 4.39},
    {"name": "Small Fries", "price": 1.49},
    {"name": "Large Fries", "price": 2.19},
    {"name": "Apple Pie", "price": 1.29},
    {"name": "Coca-Cola", "price": 1.29},
    {"name": "Sprite", "price": 1.19},
    {"name": "Fanta", "price": 1.29}
]

# Argument parsing
parser = argparse.ArgumentParser(description="Append orders to orders.json")
parser.add_argument("count", type=int, help="Number of new orders to generate")
args = parser.parse_args()
num_new_orders = args.count

file_path = "./data/orders.json"

# Ensure file exists and is properly initialized
if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
    data = [{"orders": []}]
else:
    with open(file_path, "r") as f:
        try:
            data = json.load(f)
            if not isinstance(data, list) or not data or "orders" not in data[0]:
                raise ValueError("Malformed structure")
        except Exception:
            data = [{"orders": []}]

orders = data[0]["orders"]

# Generate an order
def generate_order(order_number):
    items = random.sample(menu, k=random.randint(2, 4))
    for item in items:
        item["quantity"] = random.randint(1, 3)
    total_price = sum(item["quantity"] * item["price"] for item in items)
    return {
        "order_number": str(order_number),
        "items": items,
        "total_price": round(total_price, 2)
    }

# Determine starting order number
start_order_number = int(orders[-1]["order_number"]) + 1 if orders else 1001

# Append new orders
for i in range(num_new_orders):
    new_order = generate_order(start_order_number + i)
    orders.append(new_order)

# Save file
with open(file_path, "w") as f:
    json.dump(data, f, indent=2)

print(f"Appended {num_new_orders} new orders to {file_path}.")
